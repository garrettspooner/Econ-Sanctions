---
title: "Khi"
format: html
editor: visual
---

## Khi Function

```{r}
#|: function that loads sanction list

load_sanction <- function(sanctions) {
  path <- file.path(dirname(getwd()), "data", sanctions)
  sanction.list <- read_excel(path) # import the sanction list
  sanction.list$`TRA Good Type` <- NULL 
  sanction.list$Details <- NULL # remove column "details", not used for calculations
  sanction.list$Date <- as.Date(sanction.list$Date)
  sanction.list <- na.omit(sanction.list) # remove rows with missing values
  return(sanction.list)
}
```

```{r}
#|: function that loads beta and sanction data

load_beta <- function(reporter, partner, provide_beta, betas, sanction.list) {
  if (provide_beta) {
    path <- file.path(dirname(getwd()), "data", betas)
    beta <- read_excel(path) 
  } else {
    dates_only <- pull(sanction.list, Date)
    dates_only <- format(as.Date(dates_only, format="%d/%m/%Y"),"%Y")
    dates_only <- as.data.frame(dates_only) |> distinct(dates_only)
    dates_only <- pull(dates_only, dates_only)
    beta <- data.frame(
      Date = as.Date(character(), format = "%Y-%m-%d"),
      beta = numeric(),
      stringsAsFactors = FALSE
    )
    for (year in dates_only) {
      curr_year <- format(as.Date(Sys.Date(), format="%d/%m/%Y"),"%Y")
      if (as.double(year) >= as.double(curr_year) - 1) {
          print(paste0("Cannot obtain data for ", year))
      } else {
          df <- everything(year)
          df <- beta_filter(df, reporter, partner, year, NULL)
          df <- df |> mutate(Date = date) |> select(Date, beta)
          beta <- rbind(beta, df)
      }
    }
  }
  beta_sum <- aggregate(beta$beta, by=list(Date=beta$Date), FUN=sum)
  names(beta_sum)[names(beta_sum) == "x"] <- "beta"
  return(beta_sum)
}
```

```{r message = FALSE, warning = FALSE }
#|: function that updates and cleans provided sanction list

update_sanction <- function(sanction.list, beta, alphas) {
  # removing dates for which beta data isn't available
  first <- as.Date(min(beta$Date))
  last <- as.Date(max(beta$Date))
  dates <- c(seq(ymd(first), ymd(last), "days"))
  dates <- as.Date(dates)
  dates_df <- data.frame(Date = dates)
  sanction.list <- base::merge(sanction.list, dates_df,
    by = intersect(names(sanction.list), names(dates_df))) |> select(ID, Date, Type, Multiplier)
  sanclist.ini <- sanction.list # save the initial list
  sanclist.ini <- as.data.frame(sanclist.ini)
  sanclist.ini <- na.omit(sanclist.ini)
  # defining alpha values based on user input
  a.ind <- alphas[1] # sanction against an individual
  a.ann <- alphas[2] # announcement
  a.com <- alphas[3] # sanction against a company
  a.sec <- alphas[4] # sanction against an economic sector
  a.emb <- alphas[5] # embargo
  # replacing type column from character (sanction type) to integer (value of alpha)
  sanction.list$Type <- revalue(sanction.list$Type, c("announcement"=a.ann))
  sanction.list$Type <- revalue(sanction.list$Type, c("individual"=a.ind))
  sanction.list$Type <- revalue(sanction.list$Type, c("company"=a.com))
  sanction.list$Type <- revalue(sanction.list$Type, c("sector"=a.sec))
  sanction.list$Type <- revalue(sanction.list$Type, c("embargo"=a.emb))
  
  sanction.list <- na.omit(sanction.list) # remove rows with missing values
  sanction.list$Type <- as.numeric(sanction.list$Type) # transform column "Type" in numeric        values
  sanction.list$alpha <- sanction.list$Type * sanction.list$Multiplier # create the Alpha for     each sanction
  # remove Columns Multiplier and Type as they are not going to be used anymore:
  sanction.list$Type <- NULL
  sanction.list$Multiplier <- NULL
  both <- list(sanction.list, sanclist.ini)
  return(both)
}
```

```{r warning = FALSE}
#|: function that turns provided data into time series
# creates a daily time series (in form of data table) that starts at the date of the first sanction in the list and ends at the last date available in the beta file

create_time_series <- function(beta, sanction.list, sanclist.ini, U) {
  # U represents the day at which the sanction loses all effectiveness (e.g., with a value of    2190, any sanction is assumed to lose effectiveness after 6 years)
  # u is a vector from 1 to whatever the max value of U is; u enables us to plot the resulting   data we get from this code as a time series
  khi.U <- U # number of steps starting at day 0 (when sanction is implemented) and ends at day   /step 2190             
  khi.u <- c(1:khi.U) # sets little u between 1 (when the sanction is implemented) to 2190       (when the sanction stops)
  khi <- data.frame(khi.u)
  # defining the slope of Khi depending on each sanction type
  khi.o.ind <- 100
  khi.o.ann <- 50
  khi.o.com <- 1
  khi.o.sec <- 5
  khi.o.emb <- 15
  khi$khi.ind = (1 - (khi$khi.u / khi.U)) ^ khi.o.ind
  khi["1", "khi.ind"] <- 1 #First value = 1 as it is when the sanction is implemented.
  khi$khi.ann = (1 - (khi$khi.u / khi.U)) ^ khi.o.ann
  khi["1","khi.ann"] <- 1
  khi$khi.com = (1 - (khi$khi.u / khi.U)) ^ khi.o.com
  khi["1","khi.com"] <- 1
  khi$khi.sec = (1 - (khi$khi.u / khi.U)) ^ khi.o.sec
  khi["1","khi.sec"] <- 1
  khi$khi.emb = (1 - (khi$khi.u / khi.U)) ^ khi.o.emb
  khi["1","khi.emb"] <- 1
  dt = data.table(Date=seq(as.Date(head(sanction.list$Date, n=1)), 
                           as.Date(tail(beta$Date, n=1)), by="day"))
  dt_res <- dt # creates a data table in which results will be stored
  # applying applicable khi values (based on type of sanction) to each sanction
  setDT(sanction.list)
  khi_ind <- khi$khi.ind
  khi_ann <- khi$khi.ann
  khi_com <- khi$khi.com
  khi_sec <- khi$khi.sec
  khi_emb <- khi$khi.emb
  for (i in sanclist.ini$ID){
    dt2 <- cbind(dt, sanction.list[i,1])
    setDT(dt2)
    dt2 <- sanction.list[dt2, on = c('ID','Date')]
    dt2$alpha[is.na(dt2$alpha)] = 0
    dt2 <- cbind(dt2, sanction.list$ID[i])
    ori_col <- colnames(sanction.list)[1]
    colnames(dt2)[4] <- paste0(ori_col)
    setDT(dt2)
    setDT(beta)
    dt2$ID <- NULL
    dt2 <- left_join(dt2, beta, by = "Date")
    non_zero <- which(dt2[,4] != 0)
    row_num <- nrow(dt2[,4])
    dt2$alpha[non_zero:row_num] <- dt2$alpha[dt2$alpha != "0"]
    dt2 <- dt2[sanclist.ini, on = c('ID')]
    dt2 <- na.omit(dt2)
    dt2$i.Date <- NULL
    dt2$Multiplier <- NULL
    dt2 <- dt2[dt2$alpha != 0,]
    date <- as.Date(as.double(toString(sanction.list[i,2])), origin = "1970-01-01")
    dates <- as.Date(seq(as.Date(date), by = "day", length.out = khi.U))
    if (dt2$Type[1] == "individual") { 
      khi_to_use <- khi_ind 
    } else if (dt2$Type[1] == "announcement") { 
        khi_to_use <- khi_ann 
    } else if (dt2$Type[1] == "company") { 
        khi_to_use <- khi_com 
    } else if (dt2$Type[1] == "sector") { 
      khi_to_use <- khi_sec 
    } else { khi_to_use <- khi_emb }
    khi_combo <- data.frame(dates, khi_to_use)
    dt2 <- left_join(dt2, khi_combo, by = c("Date" = "dates"))
    dt2 <- dt2 |> mutate(
      khi = case_when(
        is.na(khi_to_use) ~ 0,
        TRUE ~ khi_to_use
      ),
      S = alpha * beta * khi
    )
    dt2$beta <- NULL
    dt2$alpha <- NULL
    dt2$ID <- NULL
    dt2$Type <- NULL
    dt2$khi <- NULL
    dt2$khi_to_use <- NULL
    dt2$S <- as.data.frame(dt2$S)
    dt_res <- left_join(dt_res, dt2, by = "Date")
  }
  n_sanc <- nrow(sanclist.ini) # determines the number of sanctions
  colnames(dt_res) = c("Date", 1:n_sanc) # rename each sanction with its ID number.
  dt_res$Sindex <- 0   # create a sanction index column that contains zeros
  dt_res[is.na(dt_res)] <-  0 # replace NA by zeros to avoid issues when summing all sanctions   with each other
  # sum each sanction into Sindex that is the final santion index.
  dt_res <- as.data.frame(dt_res) # turn it in data frame to run the "for" that follows.
  for (i in 2:n_sanc) {
    dt_res$Sindex <- dt_res$Sindex + dt_res[,i]
  }
  return(dt_res)
}
```

```{r warning = FALSE}
#|: function that plots the time series created within the data table

plot <- function(dt_res, image_name) {
  Date <- as.Date(dt_res$Date)
  S_index <- as.numeric(unlist(dt_res$Sindex))
  data <- data.frame(Date,S_index)
  ggplot(data, aes(x=as.Date(dt_res$Date), y=S_index)) + 
    geom_line(color="steelblue") + ylab("Value of the Sanction Index") + 
    xlab("Date") + 
    scale_x_date(
      date_breaks = "2 month", 
      date_labels = "%m-%Y"
    ) + 
    theme_bw() + theme(axis.text.x=element_text(angle=60, hjust=1))
  path <- file.path(dirname(getwd()), "data")
  ggsave(path = path, filename = image_name) 
}
```

```{r}
#|: overall function that combines all above functions to calculate and plot time series

khi <- function(provide_beta, betas, sanctions, alphas, image_name, reporter, partner, U) {
  sanction.list <- load_sanction(sanctions)
  beta <- load_beta(reporter, partner, provide_beta, betas, sanction.list)
  both <- update_sanction(sanction.list, beta, alphas)
  sanction.list <- as.data.frame(both[1])
  sanclist.ini <- as.data.frame(both[2])
  dt_res <- create_time_series(beta, sanction.list, sanclist.ini, U)
  plot(dt_res, image_name)
  return(dt_res)
}
```

```{r}
#|: defining parameters for khi function
# khi function will return the data table used to plot the sanction's effectiveness
# both the beta file and sanction file provided need to be structured in the exact same way as combo.xlsx (betas) and sanction_list.xlsx (sanctions), with the same column names
# the sanction file must be provided, while the beta file can be created by the function at runtime if necessary

# old example
provide_beta <- TRUE # put FALSE if you want the khi function to calculate needed betas for you
betas <- "austria_input.xlsx" # only needed if above is TRUE; provided file must be in data folder
sanctions <- "sanction_list.xlsx" # provided list of sanctions
alphas <- c(1, 10, 100, 1000, 3000)
image_name <- "my_new_plot.png" # name of image to be saved
reporter <- "United States" # only needed if provide_beta == FALSE
partner <- "China" # only need if provide_beta == FALSE
U <- 2190

# new example
provide_beta <- FALSE
sanctions <- "new_sanction_list.xlsx"
```

```{r message = FALSE warning = FALSE}
#|: running khi function

dt <- khi(provide_beta, betas, sanctions, alphas, image_name, reporter, partner, U)
view(dt)

sanction.list <- load_sanction(sanctions)
beta <- load_beta(reporter, partner, provide_beta, betas, sanction.list)
both <- update_sanction(sanction.list, beta, alphas)
sanction.list <- as.data.frame(both[1])
sanclist.ini <- as.data.frame(both[2])
dt_res <- create_time_series(beta, sanction.list, sanclist.ini, U)
plot(dt_res, image_name)
```

## Imports by Commodity

```{r}
#|: function that gets imports from partner(s) to report for a specific commodity
# to get total data for one reporter to/from all partners (i.e., the world), set the partner argument to "0"
# to get data for one reporter to/from all partners individually, set the partner argument to NULL
# for a complete list of Comtrade's country codes, see "comtrade_countries.pdf" (in the data folder)
# for a complete list of HS-classified commodity codes, see https://unstats.un.org/unsd/classifications/Econ

get_cmd <- function(reporter, partner, flow, freq, year, cmd_code) {
  exp <- import("export_ease")
  if (flow == "import") {
      exp$comtrade$Comtrade$get_cmd_imports(reporter, partner, freq, year, cmd_code)
      file_name <- paste0("cmdImports_", year, freq, "_", cmd_code, ".csv")
  } else {
      exp$comtrade$Comtrade$get_cmd_exports(reporter, partner, freq, year, cmd_code)
      file_name <- paste0("cmdExports_", year, freq, "_", cmd_code, ".csv")
  }
  path <- file.path(dirname(getwd()), "data", file_name)
  df <- read_csv(path) |> 
    select(
      freqCode, refPeriodId, refYear, refMonth, reporterCode, 
      reporterISO, reporterDesc, flowDesc, partnerCode, partnerISO, 
      partnerDesc, cmdCode, cmdDesc, primaryValue
    ) |> drop_na(primaryValue)
  df$date <- ymd(df$refPeriodId)
  df$date <- as.Date(df$date)
  df <- df |> 
    mutate(
      value = primaryValue, reporter = reporterDesc, partner = partnerDesc, 
      code = cmdCode, desc = cmdDesc, flow = flowDesc
    ) |> 
    select(date, reporter, partner, flow, value, code, desc)
  df$date <- as.Date(df$date)
  write_csv(df, path)
  return(df)
}
```

```{r}
#|: example usage of above function
# getting all monthly HS 6801 imports from all partner countries to USA in 2020

reporter <- "842" # USA
partner <- NULL # all
flow <- "import" # can also be export
freq <- "M" # can also be A (annual)
year <- "2020"
cmd_code <- "6801"

import_df <- get_cmd(reporter, partner, flow, freq, year, cmd_code)
view(df)
```

```{r}
#|: another example using above function
# getting all monthly HS 2711 exports from Norway to all partner countries in 2021

reporter <- "579" # USA
partner <- NULL # all
flow <- "export" # can also be import
freq <- "M" # can also be A (annual)
year <- "2021"
cmd_code <- "2711"

export_df <- get_cmd(reporter, partner, flow, freq, year, cmd_code)
```
